<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Calculator — Light / Dark</title>
  <style>
    /* --- Base --- */
    * { box-sizing: border-box; margin: 0; padding: 0; font-family: Inter, system-ui, Arial; }
    body {
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      background: #f3f4f6;
      color: #111827;
      transition: background 0.25s, color 0.25s;
      padding: 24px;
    }

    .app {
      width: 320px;
      max-width: 100%;
    }

    header {
      text-align: center;
      margin-bottom: 14px;
    }

    header h1 { font-size: 20px; margin-bottom: 6px; }
    header p  { font-size: 13px; color: #4b5563; margin-bottom: 10px; }

    /* --- Calculator card --- */
    .card {
      background: #ffffff;
      border-radius: 14px;
      padding: 18px;
      box-shadow: 0 6px 18px rgba(15, 23, 42, 0.08);
      transition: background 0.25s, box-shadow 0.25s;
    }

    #display {
      width: 100%;
      height: 56px;
      border-radius: 10px;
      border: none;
      padding: 10px 12px;
      font-size: 22px;
      text-align: right;
      background: #f1f5f9;
      color: #0f172a;
      margin-bottom: 12px;
      outline: none;
    }

    .controls {
      display:flex;
      align-items:center;
      justify-content:space-between;
      margin-bottom: 10px;
      gap:10px;
    }

    .mode {
      display:flex;
      gap:8px;
      align-items:center;
      font-size:14px;
      color:#374151;
    }

    .switch {
      width:44px;
      height:24px;
      background:#e5e7eb;
      border-radius:20px;
      position:relative;
      cursor:pointer;
      flex-shrink:0;
    }
    .knob {
      width:18px;
      height:18px;
      border-radius:50%;
      background:white;
      position:absolute;
      top:3px;
      left:3px;
      transition:left .18s;
      box-shadow:0 2px 6px rgba(2,6,23,0.12);
    }
    .switch.on { background:#2563eb; }
    .switch.on .knob { left:23px; }

    /* buttons grid */
    .grid {
      display:grid;
      grid-template-columns: repeat(4, 1fr);
      gap:10px;
    }

    button.calc-btn {
      padding:14px 8px;
      font-size:18px;
      border-radius:8px;
      border:none;
      cursor:pointer;
      background:#eef2ff;
      color:#0f172a;
      transition:transform .06s, background .12s;
    }
    button.calc-btn:active { transform: scale(.98); }

    .op { background:#fde68a; }        /* operators like + - * / */
    .equal { background:#34d399; grid-column: span 1; } /* = */
    .wide { grid-column: span 2; }    /* wide button (0) */
    .func { background:#fca5a5; }     /* C, DEL */

    /* --- Dark mode --- */
    body.dark {
      background: #0b1220;
      color: #e6eef8;
    }
    body.dark .card {
      background: #0f1724;
      box-shadow: 0 6px 18px rgba(2,6,23,0.6);
    }
    body.dark #display {
      background: #071025;
      color: #e6eef8;
    }
    body.dark .mode { color: #cbd5e1; }
    body.dark button.calc-btn {
      background: #0b1522;
      color: #e6eef8;
      box-shadow: none;
    }
    body.dark button.calc-btn.op { background:#3b82f6; color: white; }
    body.dark button.calc-btn.func { background:#ef4444; color: white; }
    body.dark button.calc-btn.equal { background:#10b981; color:white; }

    /* small screen tweaks */
    @media (max-width:360px){
      #display { font-size:20px; height:50px; }
      button.calc-btn { padding:12px 6px; font-size:16px; }
    }
  </style>
</head>
<body>
  <div class="app">
    <header>
      <h1>Simple Calculator</h1>
      <p>All operators + − × ÷ % ^ (use ^ or press ↑ for power)</p>
    </header>

    <div class="card">
      <div class="controls">
        <div class="mode">
          <div id="themeSwitch" class="switch" title="Toggle dark mode" role="button" aria-pressed="false">
            <div class="knob"></div>
          </div>
          <span id="modeLabel">Light Mode</span>
        </div>

        <div style="font-size:13px;color:#475569">Result appears in display</div>
      </div>

      <input id="display" type="text" readonly placeholder="0" />

      <div class="grid" id="buttons">
        <!-- row 1 -->
        <button class="calc-btn func" data-value="C">C</button>
        <button class="calc-btn func" data-value="DEL">DEL</button>
        <button class="calc-btn" data-value="%">%</button>
        <button class="calc-btn op" data-value="/">÷</button>

        <!-- row 2 -->
        <button class="calc-btn" data-value="7">7</button>
        <button class="calc-btn" data-value="8">8</button>
        <button class="calc-btn" data-value="9">9</button>
        <button class="calc-btn op" data-value="*">×</button>

        <!-- row 3 -->
        <button class="calc-btn" data-value="4">4</button>
        <button class="calc-btn" data-value="5">5</button>
        <button class="calc-btn" data-value="6">6</button>
        <button class="calc-btn op" data-value="-">−</button>

        <!-- row 4 -->
        <button class="calc-btn" data-value="1">1</button>
        <button class="calc-btn" data-value="2">2</button>
        <button class="calc-btn" data-value="3">3</button>
        <button class="calc-btn op" data-value="+">+</button>

        <!-- row 5 -->
        <button class="calc-btn" data-value="0" class="wide">0</button>
        <button class="calc-btn" data-value=".">.</button>
        <button class="calc-btn op" data-value="**">^</button>
        <button class="calc-btn equal" data-value="=">=</button>
      </div>
    </div>
  </div>

  <script>
    // --- Elements ---
    const display = document.getElementById('display');
    const buttons = document.getElementById('buttons');
    const themeSwitch = document.getElementById('themeSwitch');
    const modeLabel = document.getElementById('modeLabel');

    // --- Helpers ---
    function updateDisplay(text) {
      display.value = text;
    }

    function appendToExpression(v) {
      // avoid leading multiple zeros like 00 (simple handling)
      if (display.value === '0' && v !== '.' ) {
        display.value = v;
      } else {
        display.value += v;
      }
    }

    // --- Button clicks (delegation) ---
    buttons.addEventListener('click', (e) => {
      const btn = e.target.closest('button');
      if (!btn) return;
      const v = btn.getAttribute('data-value');

      if (v === 'C') {
        updateDisplay('');
        return;
      }
      if (v === 'DEL') {
        updateDisplay(display.value.slice(0, -1));
        return;
      }
      if (v === '=') {
        computeResult();
        return;
      }

      // append numeric/operator text
      appendToExpression(v);
    });

    // --- Compute safely ---
    function computeResult(){
      const expr = display.value.trim();
      if (!expr) return;
      try {
        // Replace ^ with ** if user typed caret (we use ** button already but just in case)
        const safeExpr = expr.replace(/\^/g, '**');

        // Basic safety: allow only digits, operators, parentheses, dot, whitespace
        if (!/^[0-9+\-*/%().\s*^]+$/.test(expr)) {
          // still attempt eval but guard
          updateDisplay('Error');
          return;
        }

        // Use Function constructor instead of direct eval for slightly safer scope
        const result = Function('"use strict"; return (' + safeExpr + ')')();

        updateDisplay(String(result));
      } catch (err) {
        updateDisplay('Error');
      }
    }

    // --- Keyboard support ---
    window.addEventListener('keydown', (e) => {
      const allowed = '0123456789+-*/().%';
      if (allowed.includes(e.key)) {
        appendToExpression(e.key);
        e.preventDefault();
      } else if (e.key === 'Enter') {
        computeResult();
      } else if (e.key === 'Backspace') {
        updateDisplay(display.value.slice(0, -1));
      } else if (e.key === '^') {
        appendToExpression('**'); // caret -> power
        e.preventDefault();
      }
    });

    // --- Theme toggle ---
    themeSwitch.addEventListener('click', () => {
      const isDark = document.body.classList.toggle('dark');
      themeSwitch.classList.toggle('on', isDark);
      themeSwitch.setAttribute('aria-pressed', String(isDark));
      modeLabel.textContent = isDark ? 'Dark Mode' : 'Light Mode';
    });

    // --- small UX: show 0 placeholder instead of empty -->
    updateDisplay('');
  </script>
</body>
</html>
